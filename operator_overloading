'''part of polymorphism-operator overloading
a=10
b=20
print(a+b)
print(int.__add__(a,b))
print(b-a)
print(int.__sub__(b,a))
a='20'
b='10'
print(a+b)
print(str.__add__(a,b))'''
class student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2
    def __add__(self,other):
        m1=self.m1+other.m1
        m2=self.m2+other.m2
        s3=student(m1,m2)
        return s3
    def __gt__(self,other):
        r1=self.m1+self.m1
        r2=other.m2+other.m2
        if r1>r2:
            return True
        else:
            return False
    def __str__(self):
        #return self.m1,self.m2
        return '{} {}'.format(self.m1,self.m2)

s1=student(23,67)
s2=student(67,89)
#case 1
s3=s1+s2    # student.__add__(s1,s2)
print(s3.m1)
print(s3.m2)
#case 2
if s1>s2:
    print("s1 wins")
else:
    print('s2 wins')
#case 3
#a=20
#print(a)
#print(a.__str__())
print(s1.__str__())
print(s2.__str__())
